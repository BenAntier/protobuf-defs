// Code generated by protoc-gen-go.
// source: error.proto
// DO NOT EDIT!

package logger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Code defines the code of the error
type Error_Code int32

const (
	Error_UNKNOWN        Error_Code = 0
	Error_SCRIPT_LOADING Error_Code = 100
	Error_RPC_CALL       Error_Code = 200
	Error_HTTP_CALL      Error_Code = 201
	Error_AD_SERVER      Error_Code = 300
	Error_DOM_NOT_FOUND  Error_Code = 400
)

var Error_Code_name = map[int32]string{
	0:   "UNKNOWN",
	100: "SCRIPT_LOADING",
	200: "RPC_CALL",
	201: "HTTP_CALL",
	300: "AD_SERVER",
	400: "DOM_NOT_FOUND",
}
var Error_Code_value = map[string]int32{
	"UNKNOWN":        0,
	"SCRIPT_LOADING": 100,
	"RPC_CALL":       200,
	"HTTP_CALL":      201,
	"AD_SERVER":      300,
	"DOM_NOT_FOUND":  400,
}

func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}
func (Error_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// Error defines a struct representing an 'error', including a code and all the
// related information.
type Error struct {
	// timestamp is the timestamp of when grpc-logger has recevied the message.
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// code is an instance of Code defined above.
	Code Error_Code `protobuf:"varint,2,opt,name=code,enum=logger.Error_Code" json:"code,omitempty"`
	// message is the error message.
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// stack_trace is only available if it's an exception that was caught.
	StackTrace string `protobuf:"bytes,4,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	// publisher is an instance of Publisher defined in publisher.proto.
	Publisher *Publisher `protobuf:"bytes,5,opt,name=publisher" json:"publisher,omitempty"`
	// user is an instance of User defined in user.proto.
	User *User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// custom is a map<string, string> that includes any data that a publisher
	// wishes to include with an event.
	Custom map[string]string `protobuf:"bytes,7,rep,name=custom" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// on_screen, if true, the event initiator was visible on the screen.
	OnScreen bool `protobuf:"varint,8,opt,name=on_screen,json=onScreen" json:"on_screen,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Error) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Error) GetPublisher() *Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *Error) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Error) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "logger.Error")
	proto.RegisterEnum("logger.Error_Code", Error_Code_name, Error_Code_value)
}

func init() { proto.RegisterFile("error.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0x41, 0x92, 0x93, 0x40,
	0x14, 0x86, 0x4d, 0x48, 0x08, 0x3c, 0x9c, 0x88, 0xaf, 0x5c, 0xb4, 0xb8, 0x98, 0xd4, 0x2c, 0x2c,
	0x57, 0xa4, 0x1c, 0x37, 0xa3, 0xbb, 0x14, 0xa0, 0x4e, 0x19, 0x81, 0xea, 0x10, 0x5d, 0x52, 0x84,
	0x69, 0x71, 0x1c, 0x42, 0xa7, 0x1a, 0xb0, 0x6a, 0x6e, 0xe1, 0x41, 0x3c, 0x88, 0x5e, 0xc6, 0x33,
	0xd8, 0x34, 0xc3, 0xc4, 0x72, 0xd7, 0xff, 0xfb, 0xbf, 0xff, 0xa7, 0xfb, 0x01, 0x16, 0x13, 0x82,
	0x0b, 0xf7, 0x20, 0x78, 0xc3, 0x51, 0x2f, 0x79, 0x51, 0x30, 0xe1, 0x9c, 0x16, 0x9c, 0x17, 0x25,
	0x5b, 0xaa, 0xe9, 0xae, 0xfd, 0xb2, 0x6c, 0xae, 0xf7, 0xac, 0x6e, 0xb2, 0xfd, 0xa1, 0x07, 0x9d,
	0x47, 0x87, 0x76, 0x57, 0x5e, 0xd7, 0x5f, 0xd9, 0x5d, 0xd2, 0x81, 0xb6, 0x1e, 0xce, 0x67, 0x7f,
	0x34, 0x98, 0x06, 0x5d, 0x2b, 0x5e, 0x80, 0x79, 0x9f, 0x24, 0xa3, 0xc5, 0xe8, 0x85, 0x75, 0xee,
	0xb8, 0x7d, 0xb7, 0x3b, 0x74, 0xbb, 0xc9, 0x40, 0xd0, 0x23, 0x8c, 0xcf, 0x61, 0x92, 0xf3, 0x2b,
	0x46, 0xc6, 0x32, 0x34, 0x3f, 0x47, 0xb7, 0xbf, 0x98, 0xab, 0x6a, 0x5d, 0x4f, 0x3a, 0x54, 0xf9,
	0x48, 0x60, 0x26, 0x23, 0x75, 0x56, 0x30, 0xa2, 0x49, 0xd4, 0xa4, 0x83, 0xc4, 0x53, 0xb0, 0x64,
	0x55, 0x7e, 0x93, 0x36, 0x22, 0xcb, 0x19, 0x99, 0x28, 0x17, 0xd4, 0x28, 0xe9, 0x26, 0xb8, 0x04,
	0xf3, 0xfe, 0x15, 0x64, 0xaa, 0x2e, 0xf7, 0x78, 0xf8, 0x4e, 0x3c, 0x18, 0xf4, 0xc8, 0xe0, 0x02,
	0x26, 0xdd, 0x2b, 0x89, 0xae, 0xd8, 0x87, 0x03, 0xbb, 0x95, 0x33, 0xaa, 0x1c, 0x7c, 0x09, 0x7a,
	0xde, 0xd6, 0x0d, 0xdf, 0x93, 0xd9, 0x42, 0x93, 0xcc, 0xd3, 0xff, 0xee, 0xad, 0xbc, 0xa0, 0x6a,
	0xc4, 0x2d, 0xbd, 0x03, 0xf1, 0x19, 0x98, 0xbc, 0x4a, 0xeb, 0x5c, 0x30, 0x56, 0x11, 0x43, 0x36,
	0x1b, 0xd4, 0xe0, 0xd5, 0x46, 0x69, 0xe7, 0x35, 0x58, 0xff, 0x64, 0xd0, 0x06, 0xed, 0x86, 0xdd,
	0xaa, 0x45, 0x9a, 0xb4, 0x3b, 0xe2, 0x13, 0x98, 0x7e, 0xcf, 0xca, 0xb6, 0xdf, 0x93, 0x49, 0x7b,
	0xf1, 0x66, 0x7c, 0x31, 0x3a, 0xfb, 0x06, 0x93, 0x6e, 0x4d, 0x68, 0xc1, 0x6c, 0x1b, 0x7e, 0x08,
	0xa3, 0xcf, 0xa1, 0xfd, 0x00, 0x11, 0xe6, 0x1b, 0x8f, 0x5e, 0xc6, 0x49, 0xba, 0x8e, 0x56, 0xfe,
	0x65, 0xf8, 0xce, 0xbe, 0xc2, 0x13, 0x30, 0x68, 0xec, 0xa5, 0xde, 0x6a, 0xbd, 0xb6, 0x7f, 0x8d,
	0x70, 0x0e, 0xe6, 0xfb, 0x24, 0x89, 0x7b, 0xfd, 0x5b, 0xe9, 0x95, 0x9f, 0x6e, 0x02, 0xfa, 0x29,
	0xa0, 0xf6, 0xcf, 0xb1, 0xac, 0x38, 0xf1, 0xa3, 0x8f, 0x69, 0x18, 0x25, 0xe9, 0xdb, 0x68, 0x1b,
	0xfa, 0xf6, 0x0f, 0x6d, 0xa7, 0xab, 0x7f, 0xf9, 0xea, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33,
	0x90, 0x8f, 0xd9, 0x4c, 0x02, 0x00, 0x00,
}
