// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

package logger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// User represents the end-user of the website.
type User struct {
	// device is an instance of the Device struct defined above.
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// publisher_device is an instance of the Device struct defined above.
	PublisherDevice *Device `protobuf:"bytes,2,opt,name=publisher_device,json=publisherDevice" json:"publisher_device,omitempty"`
	// session is an instance of the Session struct defined above.
	Session *Session `protobuf:"bytes,3,opt,name=session" json:"session,omitempty"`
	// page is an instance of the Page struct defined above.
	Page *Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
	// location is an instance of the GeoIp struct defined above.
	Location *GeoIp `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *User) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *User) GetPublisherDevice() *Device {
	if m != nil {
		return m.PublisherDevice
	}
	return nil
}

func (m *User) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *User) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *User) GetLocation() *GeoIp {
	if m != nil {
		return m.Location
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "logger.User")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0xc9, 0x4f, 0x4f, 0x4f, 0x2d, 0x92, 0xe2,
	0x49, 0x49, 0x2d, 0xcb, 0x4c, 0x4e, 0x85, 0x88, 0x4a, 0x71, 0xa7, 0xa7, 0xe6, 0x67, 0x16, 0x40,
	0x39, 0x5c, 0x05, 0x89, 0xe9, 0x30, 0x09, 0xde, 0xe2, 0xd4, 0xe2, 0xe2, 0xcc, 0xfc, 0x3c, 0x08,
	0x57, 0xe9, 0x21, 0x23, 0x17, 0x4b, 0x28, 0xd0, 0x30, 0x21, 0x35, 0x2e, 0x36, 0x88, 0x01, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x7c, 0x7a, 0x10, 0x73, 0xf5, 0x5c, 0xc0, 0xa2, 0x41, 0x50,
	0x59, 0x21, 0x4b, 0x2e, 0x81, 0x82, 0xd2, 0xa4, 0x9c, 0xcc, 0xe2, 0x8c, 0xd4, 0xa2, 0x78, 0xa8,
	0x0e, 0x26, 0xac, 0x3a, 0xf8, 0xe1, 0xea, 0x20, 0x02, 0x42, 0x9a, 0x5c, 0xec, 0x50, 0xcb, 0x25,
	0x98, 0xc1, 0x3a, 0xf8, 0x61, 0x3a, 0x82, 0x21, 0xc2, 0x41, 0x30, 0x79, 0x21, 0x05, 0x2e, 0x16,
	0x90, 0x9b, 0x25, 0x58, 0xc0, 0xea, 0x78, 0x60, 0xea, 0x02, 0x80, 0x62, 0x41, 0x60, 0x19, 0xa0,
	0x61, 0x1c, 0x39, 0xf9, 0xc9, 0x89, 0x25, 0x20, 0xd3, 0x58, 0xc1, 0xaa, 0x78, 0x61, 0xaa, 0xdc,
	0x53, 0xf3, 0x3d, 0x0b, 0x82, 0xe0, 0xd2, 0x49, 0x6c, 0x60, 0xaf, 0x1a, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x69, 0x51, 0x5f, 0xf2, 0x36, 0x01, 0x00, 0x00,
}
