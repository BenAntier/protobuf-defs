// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package logger is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Client
	User
	Pair
	Event
	Empty
	Error
*/
package logger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_Type int32

const (
	Event_BOOTLOADER_LOADED Event_Type = 0
	Event_DISCOVERY_LOADED  Event_Type = 1
	Event_SESSION_PING      Event_Type = 2
	Event_PAGE_VIEW         Event_Type = 3
	Event_IMPRESSION        Event_Type = 4
	Event_CLICK             Event_Type = 5
	Event_SKIP              Event_Type = 6
	Event_ON_SCREEN         Event_Type = 7
)

var Event_Type_name = map[int32]string{
	0: "BOOTLOADER_LOADED",
	1: "DISCOVERY_LOADED",
	2: "SESSION_PING",
	3: "PAGE_VIEW",
	4: "IMPRESSION",
	5: "CLICK",
	6: "SKIP",
	7: "ON_SCREEN",
}
var Event_Type_value = map[string]int32{
	"BOOTLOADER_LOADED": 0,
	"DISCOVERY_LOADED":  1,
	"SESSION_PING":      2,
	"PAGE_VIEW":         3,
	"IMPRESSION":        4,
	"CLICK":             5,
	"SKIP":              6,
	"ON_SCREEN":         7,
}

func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}
func (Event_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Client struct {
	PID string `protobuf:"bytes,1,opt,name=pID" json:"pID,omitempty"`
	SID string `protobuf:"bytes,2,opt,name=sID" json:"sID,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	SessID       string      `protobuf:"bytes,1,opt,name=sessID" json:"sessID,omitempty"`
	Path         string      `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Adblocker    bool        `protobuf:"varint,3,opt,name=adblocker" json:"adblocker,omitempty"`
	UID          string      `protobuf:"bytes,4,opt,name=uID" json:"uID,omitempty"`
	PuID         string      `protobuf:"bytes,5,opt,name=puID" json:"puID,omitempty"`
	UserAgent    string      `protobuf:"bytes,6,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	Device       string      `protobuf:"bytes,7,opt,name=device" json:"device,omitempty"`
	Domain       string      `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
	PageLoadTime uint64      `protobuf:"varint,9,opt,name=page_load_time,json=pageLoadTime" json:"page_load_time,omitempty"`
	Location     *User_GeoIP `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetLocation() *User_GeoIP {
	if m != nil {
		return m.Location
	}
	return nil
}

type User_GeoIP struct {
	IP      string `protobuf:"bytes,1,opt,name=IP,json=iP" json:"IP,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	City    string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
}

func (m *User_GeoIP) Reset()                    { *m = User_GeoIP{} }
func (m *User_GeoIP) String() string            { return proto.CompactTextString(m) }
func (*User_GeoIP) ProtoMessage()               {}
func (*User_GeoIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Pair struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Pair) Reset()                    { *m = Pair{} }
func (m *Pair) String() string            { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()               {}
func (*Pair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Event struct {
	Type      Event_Type                 `protobuf:"varint,1,opt,name=type,enum=logger.Event_Type" json:"type,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    *Client                    `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
	User      *User                      `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Custom    []*Pair                    `protobuf:"bytes,5,rep,name=custom" json:"custom,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Event) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Event) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Event) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Event) GetCustom() []*Pair {
	if m != nil {
		return m.Custom
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Error struct {
	ErrorCode uint32                     `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    *Client                    `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
	User      *User                      `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Custom    []*Pair                    `protobuf:"bytes,5,rep,name=custom" json:"custom,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Error) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Error) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Error) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Error) GetCustom() []*Pair {
	if m != nil {
		return m.Custom
	}
	return nil
}

func init() {
	proto.RegisterType((*Client)(nil), "logger.Client")
	proto.RegisterType((*User)(nil), "logger.User")
	proto.RegisterType((*User_GeoIP)(nil), "logger.User.GeoIP")
	proto.RegisterType((*Pair)(nil), "logger.Pair")
	proto.RegisterType((*Event)(nil), "logger.Event")
	proto.RegisterType((*Empty)(nil), "logger.Empty")
	proto.RegisterType((*Error)(nil), "logger.Error")
	proto.RegisterEnum("logger.Event_Type", Event_Type_name, Event_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Logger service

type LoggerClient interface {
	LogEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	LogError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*Empty, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) LogEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/logger.Logger/LogEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/logger.Logger/LogError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logger service

type LoggerServer interface {
	LogEvent(context.Context, *Event) (*Empty, error)
	LogError(context.Context, *Error) (*Empty, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/LogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Error)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/LogError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogError(ctx, req.(*Error))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logger.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogEvent",
			Handler:    _Logger_LogEvent_Handler,
		},
		{
			MethodName: "LogError",
			Handler:    _Logger_LogError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x52, 0xdd, 0x6a, 0xdb, 0x4a,
	0x10, 0x8e, 0x6c, 0x59, 0xb6, 0xc6, 0xb1, 0xd1, 0x59, 0xce, 0x39, 0x08, 0x73, 0x0e, 0x0d, 0xa6,
	0x94, 0x52, 0xca, 0x06, 0x9c, 0x9b, 0xde, 0x26, 0xb6, 0x08, 0x22, 0x6e, 0x2c, 0xd6, 0x6e, 0x4a,
	0xaf, 0x5c, 0x59, 0xde, 0xba, 0x22, 0x92, 0x57, 0xe8, 0x27, 0xe0, 0x37, 0xe8, 0x63, 0xf4, 0x91,
	0xfa, 0x0c, 0xa5, 0x0f, 0xd2, 0xd9, 0x5d, 0x29, 0x4e, 0xe9, 0x13, 0xf4, 0x4a, 0x33, 0xdf, 0xf7,
	0x69, 0x66, 0xf6, 0x9b, 0x81, 0x41, 0xc1, 0xf3, 0x87, 0x38, 0xe2, 0x34, 0xcb, 0x45, 0x29, 0x88,
	0x95, 0x88, 0xdd, 0x8e, 0xe7, 0xa3, 0x67, 0x3b, 0x21, 0x76, 0x09, 0x3f, 0x57, 0xe8, 0xa6, 0xfa,
	0x74, 0x5e, 0xc6, 0x29, 0x2f, 0xca, 0x30, 0xcd, 0xb4, 0x70, 0xfc, 0x1a, 0xac, 0x69, 0x12, 0xf3,
	0x7d, 0x49, 0x1c, 0x68, 0x67, 0xfe, 0xcc, 0x35, 0xce, 0x8c, 0x97, 0x36, 0x93, 0xa1, 0x44, 0x0a,
	0x44, 0x5a, 0x1a, 0xc1, 0x70, 0xfc, 0xbd, 0x05, 0xe6, 0x3b, 0xec, 0x44, 0xfe, 0x05, 0xab, 0xe0,
	0x45, 0xf1, 0xa8, 0xaf, 0x33, 0x42, 0xc0, 0xcc, 0xc2, 0xf2, 0x73, 0xfd, 0x8f, 0x8a, 0xc9, 0x7f,
	0x60, 0x87, 0xdb, 0x4d, 0x22, 0xa2, 0x7b, 0x9e, 0xbb, 0x6d, 0x24, 0x7a, 0xec, 0x08, 0xc8, 0x26,
	0x15, 0x96, 0x31, 0x75, 0x93, 0xaa, 0xae, 0x21, 0xa1, 0x4e, 0x5d, 0x43, 0x62, 0xff, 0x03, 0x54,
	0xd8, 0x77, 0x1d, 0xee, 0x70, 0x54, 0xd7, 0x52, 0x8c, 0x2d, 0x91, 0x4b, 0x09, 0xc8, 0x71, 0xb6,
	0x5c, 0x3e, 0xdf, 0xed, 0xea, 0x71, 0x74, 0xa6, 0x70, 0x91, 0x86, 0xf1, 0xde, 0xed, 0xd5, 0xb8,
	0xca, 0xc8, 0x73, 0x18, 0x66, 0x58, 0x6a, 0x9d, 0x88, 0x70, 0xbb, 0x96, 0x96, 0xb8, 0x36, 0xf2,
	0x26, 0x3b, 0x95, 0xe8, 0x1c, 0xc1, 0x15, 0x62, 0x84, 0x42, 0x0f, 0x87, 0x0c, 0xcb, 0x58, 0xec,
	0x5d, 0x40, 0xbe, 0x3f, 0x21, 0x54, 0xfb, 0x4a, 0xa5, 0x09, 0xf4, 0x9a, 0x0b, 0x3f, 0x60, 0x8f,
	0x9a, 0x91, 0x07, 0x1d, 0x05, 0x91, 0x21, 0xb4, 0xfc, 0xa0, 0x76, 0xa6, 0x15, 0x07, 0xc4, 0x85,
	0x6e, 0x24, 0xaa, 0x7d, 0x99, 0x1f, 0x6a, 0x63, 0x9a, 0x54, 0xbe, 0x35, 0x8a, 0xcb, 0x83, 0xb2,
	0x05, 0xdf, 0x2a, 0xe3, 0x31, 0x05, 0x33, 0x08, 0x63, 0xe5, 0xcc, 0x3d, 0x3f, 0x34, 0x0b, 0xc1,
	0x90, 0xfc, 0x0d, 0x9d, 0x87, 0x30, 0xa9, 0x78, 0x5d, 0x45, 0x27, 0xe3, 0x1f, 0x2d, 0xe8, 0x78,
	0x0f, 0xd2, 0x86, 0x17, 0x60, 0x96, 0x87, 0x8c, 0xab, 0x5f, 0x86, 0xc7, 0x61, 0x15, 0x49, 0x57,
	0xc8, 0x30, 0xc5, 0x93, 0x37, 0x60, 0x3f, 0xde, 0x81, 0xaa, 0xd5, 0x9f, 0x8c, 0xa8, 0xbe, 0x14,
	0xda, 0x5c, 0x0a, 0x5d, 0x35, 0x0a, 0x76, 0x14, 0x63, 0x07, 0x2b, 0x52, 0xe7, 0xa2, 0x26, 0xee,
	0x4f, 0x86, 0x4d, 0x0f, 0x7d, 0x44, 0xac, 0x66, 0xc9, 0x19, 0x98, 0x72, 0x3b, 0x6a, 0xad, 0xfd,
	0xc9, 0xe9, 0x53, 0xdb, 0x98, 0x62, 0x70, 0x05, 0x56, 0x54, 0x15, 0xa5, 0x48, 0x71, 0xcf, 0xed,
	0xa7, 0x1a, 0xf9, 0x76, 0x56, 0x73, 0xe3, 0x2f, 0x06, 0x98, 0x72, 0x70, 0xf2, 0x0f, 0xfc, 0x75,
	0xb5, 0x58, 0xac, 0xe6, 0x8b, 0xcb, 0x99, 0xc7, 0xd6, 0xea, 0x33, 0x73, 0x4e, 0xd0, 0x11, 0x67,
	0xe6, 0x2f, 0xa7, 0x8b, 0x3b, 0x8f, 0x7d, 0x68, 0x50, 0x03, 0x9d, 0x3b, 0x5d, 0x7a, 0xcb, 0xa5,
	0xbf, 0xb8, 0x5d, 0x07, 0xfe, 0xed, 0xb5, 0xd3, 0x22, 0x03, 0xb0, 0x83, 0xcb, 0x6b, 0x6f, 0x7d,
	0xe7, 0x7b, 0xef, 0x9d, 0x36, 0x2e, 0x08, 0xfc, 0xb7, 0x01, 0xd3, 0x1a, 0xc7, 0x24, 0x36, 0x74,
	0xa6, 0x73, 0x7f, 0x7a, 0xe3, 0x74, 0x48, 0x0f, 0xcc, 0xe5, 0x8d, 0x1f, 0x38, 0x96, 0xfc, 0x07,
	0x0b, 0x2c, 0xa7, 0xcc, 0xf3, 0x6e, 0x9d, 0xee, 0xb8, 0x8b, 0x2e, 0xa7, 0x19, 0xee, 0xe7, 0x9b,
	0x81, 0x51, 0x9e, 0x8b, 0x5c, 0x5e, 0x25, 0x97, 0xc1, 0x3a, 0x12, 0x5b, 0xed, 0xfa, 0x80, 0xd9,
	0x0a, 0x99, 0x22, 0xf0, 0xe7, 0xd8, 0x3c, 0xf9, 0x08, 0xd6, 0x5c, 0xc1, 0xe4, 0x15, 0xf4, 0x30,
	0xd2, 0xe7, 0x34, 0xf8, 0xe5, 0x80, 0x46, 0xc7, 0x54, 0xd9, 0x70, 0xd2, 0x68, 0x95, 0x15, 0x47,
	0x52, 0xa6, 0xbf, 0x69, 0xaf, 0x28, 0x8c, 0x22, 0x91, 0xd2, 0xac, 0xda, 0x24, 0x71, 0x14, 0x52,
	0xec, 0x9a, 0xa7, 0xb4, 0xb8, 0xd0, 0x3e, 0x5c, 0xf5, 0x75, 0xf7, 0x40, 0x26, 0x81, 0xf1, 0xd5,
	0x30, 0x36, 0x96, 0x22, 0x2e, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x85, 0x8b, 0x5d, 0x70, 0xd8,
	0x04, 0x00, 0x00,
}
