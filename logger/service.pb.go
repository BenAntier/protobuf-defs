// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package logger is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Client
	User
	Pair
	EventRequest
	EventResponse
	ErrorRequest
	ErrorResponse
*/
package logger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Client struct {
	PID string `protobuf:"bytes,1,opt,name=pID" json:"pID,omitempty"`
	SID string `protobuf:"bytes,2,opt,name=sID" json:"sID,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	SessID       string      `protobuf:"bytes,1,opt,name=sessID" json:"sessID,omitempty"`
	Path         string      `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Adblocker    bool        `protobuf:"varint,3,opt,name=adblocker" json:"adblocker,omitempty"`
	UID          string      `protobuf:"bytes,4,opt,name=uID" json:"uID,omitempty"`
	PuID         string      `protobuf:"bytes,5,opt,name=puID" json:"puID,omitempty"`
	UserAgent    string      `protobuf:"bytes,6,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	Device       string      `protobuf:"bytes,7,opt,name=device" json:"device,omitempty"`
	Domain       string      `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
	PageLoadTime uint64      `protobuf:"varint,9,opt,name=page_load_time,json=pageLoadTime" json:"page_load_time,omitempty"`
	Location     *User_GeoIP `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetLocation() *User_GeoIP {
	if m != nil {
		return m.Location
	}
	return nil
}

type User_GeoIP struct {
	IP      string `protobuf:"bytes,1,opt,name=IP,json=iP" json:"IP,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	City    string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
}

func (m *User_GeoIP) Reset()                    { *m = User_GeoIP{} }
func (m *User_GeoIP) String() string            { return proto.CompactTextString(m) }
func (*User_GeoIP) ProtoMessage()               {}
func (*User_GeoIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Pair struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Pair) Reset()                    { *m = Pair{} }
func (m *Pair) String() string            { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()               {}
func (*Pair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EventRequest struct {
	Client *Client `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
	User   *User   `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Custom []*Pair `protobuf:"bytes,3,rep,name=custom" json:"custom,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EventRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *EventRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *EventRequest) GetCustom() []*Pair {
	if m != nil {
		return m.Custom
	}
	return nil
}

type EventResponse struct {
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ErrorRequest struct {
	ErrorCode uint32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Client    *Client `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
	User      *User   `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Custom    []*Pair `protobuf:"bytes,4,rep,name=custom" json:"custom,omitempty"`
}

func (m *ErrorRequest) Reset()                    { *m = ErrorRequest{} }
func (m *ErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*ErrorRequest) ProtoMessage()               {}
func (*ErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ErrorRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *ErrorRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ErrorRequest) GetCustom() []*Pair {
	if m != nil {
		return m.Custom
	}
	return nil
}

type ErrorResponse struct {
}

func (m *ErrorResponse) Reset()                    { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()               {}
func (*ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*Client)(nil), "logger.Client")
	proto.RegisterType((*User)(nil), "logger.User")
	proto.RegisterType((*User_GeoIP)(nil), "logger.User.GeoIP")
	proto.RegisterType((*Pair)(nil), "logger.Pair")
	proto.RegisterType((*EventRequest)(nil), "logger.EventRequest")
	proto.RegisterType((*EventResponse)(nil), "logger.EventResponse")
	proto.RegisterType((*ErrorRequest)(nil), "logger.ErrorRequest")
	proto.RegisterType((*ErrorResponse)(nil), "logger.ErrorResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Logger service

type LoggerClient interface {
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	Error(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/logger.Logger/Event", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) Error(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := grpc.Invoke(ctx, "/logger.Logger/Error", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logger service

type LoggerServer interface {
	Event(context.Context, *EventRequest) (*EventResponse, error)
	Error(context.Context, *ErrorRequest) (*ErrorResponse, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Error(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logger.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _Logger_Event_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _Logger_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x63, 0x59, 0x56, 0xac, 0xf1, 0x9f, 0x96, 0x25, 0x2d, 0x22, 0xb4, 0x10, 0x44, 0x29,
	0x3d, 0x14, 0x1d, 0x5c, 0xe8, 0xbd, 0xa4, 0xa1, 0x18, 0x72, 0x30, 0x4b, 0x7b, 0x36, 0x8a, 0xbc,
	0xb8, 0x22, 0xb2, 0x56, 0xd5, 0xae, 0x4c, 0x7d, 0xe9, 0x9b, 0xf4, 0xe5, 0xfa, 0x24, 0x9d, 0x99,
	0x5d, 0xa5, 0xa2, 0x97, 0xe4, 0x36, 0xf3, 0x1b, 0xcd, 0xcc, 0x37, 0xdf, 0x22, 0x58, 0x18, 0xd5,
	0x1e, 0xcb, 0x42, 0x65, 0x4d, 0xab, 0xad, 0x16, 0x51, 0xa5, 0xf7, 0x7b, 0xd5, 0xa6, 0xef, 0x21,
	0xba, 0xae, 0x4a, 0x55, 0x5b, 0xf1, 0x1c, 0xc6, 0xcd, 0xfa, 0x73, 0x32, 0xba, 0x1a, 0xbd, 0x8b,
	0x25, 0x85, 0x44, 0x0c, 0x92, 0xc0, 0x11, 0x0c, 0xd3, 0x3f, 0x01, 0x84, 0xdf, 0x70, 0x90, 0x78,
	0x09, 0x91, 0x51, 0xc6, 0x3c, 0x7c, 0xef, 0x33, 0x21, 0x20, 0x6c, 0x72, 0xfb, 0xdd, 0xf7, 0x70,
	0x2c, 0x5e, 0x41, 0x9c, 0xef, 0xee, 0x2a, 0x5d, 0xdc, 0xab, 0x36, 0x19, 0x63, 0x61, 0x2a, 0xff,
	0x01, 0x5a, 0xd2, 0xe1, 0x98, 0xd0, 0x2d, 0xe9, 0xfc, 0x0c, 0x42, 0x13, 0x3f, 0x83, 0xd8, 0x6b,
	0x80, 0x0e, 0xf7, 0x6e, 0xf3, 0x3d, 0x4a, 0x4d, 0x22, 0xae, 0xc4, 0x44, 0x3e, 0x11, 0x20, 0x39,
	0x3b, 0x45, 0xd7, 0x25, 0xe7, 0x4e, 0x8e, 0xcb, 0x98, 0xeb, 0x43, 0x5e, 0xd6, 0xc9, 0xd4, 0x73,
	0xce, 0xc4, 0x1b, 0x58, 0x36, 0x38, 0x6a, 0x5b, 0xe9, 0x7c, 0xb7, 0xb5, 0xe5, 0x41, 0x25, 0x31,
	0xd6, 0x43, 0x39, 0x27, 0x7a, 0x8b, 0xf0, 0x2b, 0x32, 0x91, 0xc1, 0x14, 0x45, 0xe6, 0xb6, 0xd4,
	0x75, 0x02, 0x58, 0x9f, 0xad, 0x44, 0xe6, 0x6c, 0xcb, 0xc8, 0x84, 0xec, 0x8b, 0xd2, 0xeb, 0x8d,
	0x7c, 0xf8, 0xe6, 0xf2, 0x06, 0x26, 0x8c, 0xc4, 0x12, 0x82, 0xf5, 0xc6, 0x3b, 0x13, 0x94, 0x1b,
	0x91, 0xc0, 0x79, 0xa1, 0xbb, 0xda, 0xb6, 0x27, 0x6f, 0x4c, 0x9f, 0xd2, 0xad, 0x45, 0x69, 0x4f,
	0x6c, 0x0b, 0xde, 0x4a, 0x71, 0x9a, 0x41, 0xb8, 0xc9, 0x4b, 0x76, 0xe6, 0x5e, 0x9d, 0xfa, 0x07,
	0xc1, 0x50, 0x5c, 0xc0, 0xe4, 0x98, 0x57, 0x9d, 0xf2, 0x53, 0x5c, 0x92, 0xfe, 0x82, 0xf9, 0xcd,
	0x11, 0x5d, 0x90, 0xea, 0x47, 0xa7, 0x8c, 0x15, 0x6f, 0x21, 0x2a, 0xf8, 0x49, 0xb9, 0x75, 0xb6,
	0x5a, 0xf6, 0xa2, 0xdd, 0x43, 0x4b, 0x5f, 0x15, 0x57, 0x10, 0x92, 0x83, 0x3c, 0x6c, 0xb6, 0x9a,
	0x0f, 0x4f, 0x93, 0x5c, 0x41, 0x9b, 0xa2, 0xa2, 0x33, 0x56, 0x1f, 0x50, 0xdf, 0x78, 0xf8, 0x0d,
	0xe9, 0x93, 0xbe, 0x96, 0x3e, 0x83, 0x85, 0xdf, 0x6f, 0x1a, 0x5d, 0x1b, 0x95, 0xfe, 0x1e, 0xa1,
	0xa2, 0xb6, 0xd5, 0x6d, 0xaf, 0x08, 0x5f, 0x4f, 0x51, 0xbe, 0x2d, 0xf4, 0x4e, 0xb1, 0xaa, 0x85,
	0x8c, 0x99, 0x5c, 0x23, 0x18, 0x08, 0x0e, 0x9e, 0x24, 0x78, 0xfc, 0x04, 0xc1, 0xe1, 0x23, 0x82,
	0x9d, 0x3c, 0x27, 0x78, 0xf5, 0x13, 0xa2, 0x5b, 0xfe, 0x4e, 0x7c, 0x84, 0x09, 0xdf, 0x22, 0x2e,
	0xfa, 0xce, 0xa1, 0xb5, 0x97, 0x2f, 0xfe, 0xa3, 0xfe, 0xe0, 0x33, 0xee, 0xa3, 0x91, 0x83, 0xbe,
	0x81, 0x01, 0x83, 0xbe, 0xe1, 0xde, 0xf4, 0xec, 0x2e, 0xe2, 0xbf, 0xf1, 0xc3, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x03, 0x30, 0x34, 0x82, 0x9e, 0x03, 0x00, 0x00,
}
