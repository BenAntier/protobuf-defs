// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package logger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Logger service

type LoggerClient interface {
	// LogEvent is an RPC endpoint for logging an event.
	LogEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// LogError is an RPC endpoint for logging an error.
	LogError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) LogEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/logger.Logger/LogEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/logger.Logger/LogError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logger service

type LoggerServer interface {
	// LogEvent is an RPC endpoint for logging an event.
	LogEvent(context.Context, *Event) (*google_protobuf3.Empty, error)
	// LogError is an RPC endpoint for logging an error.
	LogError(context.Context, *Error) (*google_protobuf3.Empty, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/LogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Error)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/LogError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogError(ctx, req.(*Error))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logger.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogEvent",
			Handler:    _Logger_LogEvent_Handler,
		},
		{
			MethodName: "LogError",
			Handler:    _Logger_LogError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor7,
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0xc9, 0x4f, 0x4f, 0x4f, 0x2d, 0x92, 0x92, 0x49,
	0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49,
	0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x92, 0x92, 0x86, 0xca, 0x82, 0x79, 0x49, 0xa5, 0x69,
	0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x50, 0x49, 0xee, 0xd4, 0xb2, 0xd4, 0xbc, 0x12, 0x38, 0xa7,
	0xa8, 0x28, 0xbf, 0x08, 0xc2, 0x31, 0x5a, 0xc4, 0xc8, 0xc5, 0xe6, 0x03, 0x36, 0x5f, 0xc8, 0x9b,
	0x8b, 0x03, 0xc8, 0x72, 0x05, 0xa9, 0x14, 0xe2, 0xd5, 0x83, 0x58, 0xaa, 0x07, 0xe6, 0x4a, 0x89,
	0xe9, 0x41, 0x4c, 0xd7, 0x83, 0x99, 0xae, 0xe7, 0x0a, 0x32, 0x5d, 0x49, 0xa2, 0xe9, 0xf2, 0x93,
	0xc9, 0x4c, 0x42, 0x4a, 0xbc, 0xfa, 0x65, 0x86, 0xfa, 0x40, 0x1d, 0xfa, 0x60, 0x7b, 0xac, 0x18,
	0xb5, 0x60, 0x86, 0x81, 0x6c, 0x42, 0x32, 0x0c, 0xc4, 0x25, 0xc1, 0x30, 0x90, 0x72, 0xa0, 0x61,
	0x49, 0x6c, 0x60, 0x95, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x12, 0x4c, 0x68, 0xc4, 0x15,
	0x01, 0x00, 0x00,
}
